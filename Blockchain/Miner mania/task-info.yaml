type: edu
custom_name: stage3
files:
- name: test/BlockchainTest.java
  visible: false
  text: |
    import blockchain.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() != 11) {
                throw new BlockParseException("Every block should " +
                    "contain 11 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).startsWith("Id:")) {
                throw new BlockParseException("Third line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(2).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(3).startsWith("Timestamp:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(4).startsWith("Magic number:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(5).equals("Hash of the previous block:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(7).equals("Hash of the block:")) {
                throw new BlockParseException("8-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(6).strip();
            String hash = lines.get(8).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {
        public BlockchainTest() {
            super(Main.class);
        }

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 5) {
                return new CheckResult(false,
                    "You should output 5 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Main.java
  visible: true
  text: |-
    package blockchain;

    public class Main {
        public static void main(String args[]){
            BlockChain blockChain = new BlockChain();

            for(int i=0; i<5; i++){
                Block block = blockChain.createBlock();
                printBlock(block);
                System.out.print( (i < 4) ? "\n" : "");
            }
        }

        private static void printBlock(Block block){
            System.out.println("Block:");
            System.out.println("Id: " + block.getId());
            System.out.println("Timestamp: " + block.getTimestamp());
            System.out.println("Hash of the previous block: \n" + block.getPrevBlockHash());
            System.out.println("Hash of the block: \n" + block.getHash());
        }
    }
  learner_created: false
- name: src/blockchain/Block.java
  visible: true
  text: |
    package blockchain;

    import java.util.Date;

    public class Block {

        private final String prevBlockHash;
        private final long id;
        private final long timestamp;
        private final String hash;

        public Block(final long id, final String prevBlockHash){
            this.prevBlockHash = prevBlockHash;
            this.id = id;
            timestamp = new Date().getTime();
            hash = StringUtil.applySha256(toString());
        }

        @Override
        public String toString(){
            StringBuilder str = new StringBuilder();
            str.append(prevBlockHash);
            str.append(id);
            str.append(timestamp);
            return str.toString();
        }

        public long getId(){
            return id;
        }

        public long getTimestamp(){
            return timestamp;
        }

        public String getHash(){
            return hash;
        }

        public String getPrevBlockHash(){
            return prevBlockHash;
        }
    }
  learner_created: false
- name: src/blockchain/Blockchain.java
  visible: true
  text: |-
    package blockchain;

    import java.io.Serializable;
    import java.util.ArrayList;

    public class Blockchain implements Serializable {
        private long id;
        private String prevBlockHash;
        private final ArrayList<Block> chain;
        private String fileName = null;
        private int noOfStartZerosForHash = 0;

        private Blockchain(String fileName, int noOfStartZerosForHash) {
            this.id = 1;
            prevBlockHash = "0";
            chain = new ArrayList<Block>();
            this.fileName = fileName;
            this.noOfStartZerosForHash = noOfStartZerosForHash;
        }

        public void addBlock() {
            Block block = Block.generateBlock(id, prevBlockHash, noOfStartZerosForHash);
            chain.add(block);
            id++;
            prevBlockHash = block.getHash();

            try{
                SerializationUtils.serialize(this, fileName);
            } catch (Exception e){
                e.printStackTrace();
            }
        }

        public static Blockchain generateBlockchain (String fileName, int noOfStartZerosForHash, Object caller) {
            if(!(caller instanceof BlockchainDriver)) throw new IllegalCallerException();
            return new Blockchain(fileName, noOfStartZerosForHash);
        }

        public boolean isValid() {
            long id = 1;
            String prevBlockHash = "0";
            String expectedStarting = "0".repeat(Math.max(0, noOfStartZerosForHash));

            for (Block block : chain) {
                if (block.getId() != id) return false;
                if (!block.getPrevBlockHash().equals(prevBlockHash)) return false;
                if (!block.isConsistent()) return false;
                String presentHash = block.getHash();
                if (!presentHash.startsWith(expectedStarting)) return false;

                id += 1;
                prevBlockHash = presentHash;
            }

            return true;
        }

        public long getLength() { return chain.size(); }

        public Block getBlock(int index) { return chain.get(index); }

        public int getNoOfStartZerosForHash() { return noOfStartZerosForHash; }
    }
  learner_created: true
- name: src/blockchain/BlockchainDriver.java
  visible: true
  text: |-
    package blockchain;

    public class BlockchainDriver {

        public Blockchain getBlockchain(int noOfStartZerosForHash){
            String fileName = "cache";
            Blockchain blockchain = null;

            try {
                blockchain = (Blockchain) SerializationUtils.deserialize(fileName);
            } catch(Exception ignored) {

            } finally {
                if(
                           blockchain == null
                        || blockchain.getNoOfStartZerosForHash() != noOfStartZerosForHash
                        ||!blockchain.isValid()
                ) {
                    blockchain = Blockchain.generateBlockchain(fileName, noOfStartZerosForHash, this);
                }
            }

            return blockchain;
        }
    }
  learner_created: true
- name: src/blockchain/miner/MinerFactory.java
  visible: true
  learner_created: true
- name: src/blockchain/miner/Miner.java
  visible: true
  learner_created: true
- name: src/blockchain/utils/SerializationUtils.java
  visible: true
  text: |
    package blockchain;

    import java.io.IOException;
    import java.io.ObjectInputStream;
    import java.io.ObjectOutputStream;
    import java.io.FileInputStream;
    import java.io.FileOutputStream;
    import java.io.BufferedInputStream;
    import java.io.BufferedOutputStream;

    class SerializationUtils {
        static void serialize(Object obj, String fileName) throws IOException {
            FileOutputStream fos = new FileOutputStream(fileName);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            ObjectOutputStream oos = new ObjectOutputStream(bos);
            oos.writeObject(obj);
            oos.close();
        }

        static Object deserialize(String fileName) throws IOException, ClassNotFoundException {
            FileInputStream fis = new FileInputStream(fileName);
            BufferedInputStream bis = new BufferedInputStream(fis);
            ObjectInputStream ois = new ObjectInputStream(bis);
            Object obj = ois.readObject();
            ois.close();
            return obj;
        }
    }
  learner_created: true
- name: src/blockchain/utils/StringUtils.java
  visible: true
  text: |-
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    public class StringUtils {

        public static String applySha256(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");

                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));

                StringBuilder hexString = new StringBuilder();

                for (byte elem : hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if (hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }

                return hexString.toString();

            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

    }
  learner_created: true
- name: blockchain.BlockchainDriver@32dafffc
  visible: true
  learner_created: true
- name: blockchain.BlockchainDriver@1ac950c1
  visible: true
  learner_created: true
- name: blockchain.BlockchainDriver@280ee8c8
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/273/implement
status: Solved
record: 3
